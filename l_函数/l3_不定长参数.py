# 不定长参数
#   位置参数
#       *参数 只能有一个，位置不限
#       *参数 可以和其他参数配合使用
#
#       def fn2(a,b,*c)  第一个参数给a，第二个参数给b，剩下的都保存到c的元组中
#       def fn2(a,*b,c)  第一个参数给a，剩下的位置参数给b的元组，c必须使用关键字参数
#       def fn2(*a,b,c)  所有的位置参数都给a，b和c必须使用关键字参数
#       def fn2(*,a,b,c) 形参的开头直接写一个*,要求所有的参数必须以关键字参数的形式传递，否则报错
#       def fn3(*a)      * 形参只能接收位置参数，而不能接收关键字参数
#
#   关键字参数
#       **形参 只能有一个，并且必须写在所有参数的最后
#       **形参 可以接收其他的关键字参数，它会将这些参数统一保存到一个字典中
#              字典的key就是参数的名字，字典的value就是参数的值

print('------------------*形参-----------------------')


def Sum1(a, *c, b=2):
    print('a=', a, 'b=', b, 'c=', c)  # a= 10 b= 2 c= (20, 30, 40, 50, 60)
    print('c 的类型：', type(c))  # <class 'tuple'>
    return


def Sum2(a, b=2, *c):
    print('a=', a, 'b=', b, 'c=', c)  # a= 10 b= 20 c= (30, 40, 50, 60)
    return


Sum1(10, 20, 30, 40, 50, 60)
Sum2(10, 20, 30, 40, 50, 60)

print('------------------**形参-----------------------')


def fn3(b, c=100, **a):
    print('a =', a, type(a))
    print('b =', b)
    print('c =', c)


fn3(b=1, d=2, c=3, e=10, f=20)

print('------------------应用-----------------------')


def my_sum(*nums):
    result = 0
    # 遍历元组，并将元组中的数进行累加
    for n in nums:
        result += n
    return result


result = my_sum(1, 2, 3, 4, 5, 6)
print(result)

print('------------------参数解包-----------------------')


def fn4(a, b, c):
    print('a =', a)
    print('b =', b)
    print('c =', c)


t = (10, 20, 30)  # 创建一个元组
fn4(*t)

d = {'a': 100, 'b': 200, 'c': 300}  # 创建一个字典  要求：形参名与字典键名相同
fn4(**d)

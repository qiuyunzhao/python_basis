# 第六章 对象（Object）

## 什么是对象？
    - 对象是内存中专门用来存储数据的一块区域。
    - 对象中可以存放各种数据（比如：数字、布尔值、代码）
    - 对象由三部分组成：
        1.对象的标识（id）
        2.对象的类型（type）
        3.对象的值（value）

## 面向对象（oop）
    - Python是一门面向对象的编程语言

## 类(class)
    - Python内置许多对象，但是内置对象并不能满足所有的需求，所以我们在开发中经常需要自定义一些对象

    - 像 int() float() bool() str() list() dict() .... 这些都是类
    - a = int(10) # 创建一个int类的实例 等价于 a = 10

    - 我们自定义的类都需要使用大写字母开头，使用大驼峰命名法（帕斯卡命名法）来对类命名

    - 类也是一个对象，是一个用来创建对象的对象！
    - 类是type类型的对象，定义类实际上就是定义了一个type类型的对象

## 使用类创建对象的流程（参考图1）
    1.创建一个变量
    2.在内存中创建一个新对象
    3.将对象的id赋值给变量

## 类的定义（参考图2）
    - 由两部分构成：
        1.数据（属性）
        2.行为（方法）

    - 在类的代码块中，我们可以定义变量和函数，
        变量会成为该类实例的公共属性，所有的该类实例都可以通过  对象.属性名  的形式访问
        函数会成为该类实例的公共方法，所有该类实例都可以通过  对象.方法名()  的形式调用方法

    - 注意：
        方法调用时，第一个参数由解析器自动传递，所以定义方法时，至少要定义一个形参！

    - 实例为什么能访问到类中的属性和方法
        类中定义的属性和方法都是公共的，任何该类实例都可以访问

        - 属性和方法查找的流程
            当我们调用一个对象的属性时，解析器会先在当前对象中寻找是否含有该属性，
                如果有，则直接返回当前的对象的属性值，
                如果没有，则去当前对象的类对象中去寻找，如果有则返回类对象的属性值，
                如果类对象中依然没有，则报错！

        - 类对象和实例对象中都可以保存属性（方法）
            - 如果这个属性（方法）是所有的实例共享的，则应该将其保存到类对象中
            - 如果这个属性（方法）是某个实例独有，则应该保存到实例对象中

        - 一般情况下，属性保存到实例对象中
            而方法需要保存到类对象中


## 创建对象的流程
    p1 = Person()的运行流程
        1.创建一个变量
        2.在内存中创建一个新对象
        3.__init__(self)方法执行
        4.将对象的id赋值给变量

## 类的基本结构
    class 类名([父类]) :

        公共的属性...

        # 对象的初始化方法
        def __init__(self,...):
            ...

        # 其他的方法
        def method_1(self,...):
            ...

        def method_2(self,...):
            ...

        ...

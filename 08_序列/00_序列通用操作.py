print('============================================= 序列通用方法 =====================================================')
my_lists = []  # 创建了一个空列表
print(my_lists, type(my_lists))  # [] <class 'list'>

# 注意：列表中可以保存任意的对象
my_lists = [10, 'hello', True, None, [1, 2, 3], print]
print(my_lists)

print('---------------------------------------------------------------------------------------------------------1.拼接')
my_list = [1, 2, 3] + [4, 5, 6]
print(my_list)

print('---------------------------------------------------------------------------------------------------------2.重复')
my_list = [1, 2] * 5
print(my_list)

print('---------------------------------------------------------------------------------------------------------3.获取')
# 列表中的对象都会按照插入的顺序存储到列表中，可以通过索引（index）来获取列表中的元素
# 索引是从0开始的整数,如果使用的索引超过了最大的范围，会抛出异常 IndexError: list index out of range
print(my_lists[4])  # [1, 2, 3]  从前向后获取
print(my_lists[-2])  # [1, 2, 3]  从后向前获取

print('---------------------------------------------------------------------------------------------------------4.截取')
# 切片：获取列表中的一部分
# 语法：列表[起始:结束:步长]
#   步长默认为1，负数表示从列表的后部向前边取元素,不能为0
#   通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素
#   做切片操作时，总会返回一个新的列表，不会影响原来的列表
#   起始和结束位置的索引都可以省略不写
#   如果省略结束位置，则会一直截取到最后
#   如果省略起始位置，则会从第一个元素开始截取
#   如果起始位置和结束位置全部省略，则相当于创建了一个列表的副本
lists = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(lists[1:])  # [2, 3, 4, 5, 6, 7, 8, 9]
print(lists[:3])  # [1, 2, 3]
print(lists[:])  # [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(lists[::2])  # [1, 3, 5, 7, 9]
print(lists[::-2])  # [9, 7, 5, 3, 1]

print('-------------------------------------------------------------------------------------------5.大小，最大值，最小值')
print(len(lists))  # 9
print(max(lists))  # 9
print(min(lists))  # 1

print('------------------------------------------------------------------------------------6.是否存在，出现次数，出现位置')
stus = ['孙悟空', '猪八戒', '沙和尚', '唐僧', '蜘蛛精', '白骨精', '沙和尚', '沙和尚']
# 是否存在
print('牛魔王' in stus)
print('牛魔王' not in stus)
# 出现次数
print(stus.count('沙和尚'))
# 第一次出现位置
print(stus.index('沙和尚'))
# 第二个参数，表示查找的起始位置(包含),第三个参数，表示查找的结束位置(不包含)
print(stus.index('沙和尚', 2, 5))

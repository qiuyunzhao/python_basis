# 匿名函数 lambda 函数表达式 （语法糖）
#   lambda函数表达式用来创建一些简单的函数，是函数创建的又一种方式
#   语法：lambda 参数列表 : 返回值
#   匿名函数一般都是作为参数使用，其他地方一般不会使用

print((lambda a, b: a + b)(10, 20))

func = lambda a, b: a + b  # 也可以将匿名函数赋值给一个变量，一般不会这么用
print(func(10, 20))

# ============================================ 匿名函数的应用 =====================================================

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # 创建一个列表
r = filter(lambda i: i > 5, l)
print('filter -- ', list(r))

# map() 函数
#     可以对可迭代对象中的所有元素做指定的操作，然后将其添加到一个新的对象中返回
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
r = map(lambda i: i ** 2, l)
print('map -- ', list(r))

# sort() 函数
#     用来对 '列表' 中的元素进行排序
#     sort()方法默认是直接比较列表中的元素的大小
#     sorted()排序会影响原来的对象
#     在sort()可以接收一个关键字参数 key
#       key需要一个函数作为参数
#       设置函数作为参数，每次会以列表中的一个元素作为参数来调用函数，并且使用函数的返回值来比较元素的大小进行排序
l = ['bb', 'aaaa', 'c', 'ddddddddd', 'fff']
l.sort(key=len)  # len()返回序列的长度
print('sort -- ', l)

l = [2, 5, '1', 3, '6', '4']
l.sort(key=int)
print('sort -- ', l)

# sorted() 函数
#   与sort()的用法基本一致，但sorted()可以对 '任意的序列' 进行排序
#   使用sorted()排序不会影响原来的对象，而是返回一个新对象
l = (2, 5, '1', 3, '6', '4')
print('sorted()排序前:', l)
print('sorted()排序后:', sorted(l, key=int))
print(l)

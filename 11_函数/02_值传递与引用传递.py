# 可更改(mutable)与不可更改(immutable)对象
#     strings, tuples, 和 numbers 是不可更改的对象
#     list,dict 等则是可以修改的对象。
#
# 不可变类型：
#     变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，
#     再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
#
# 可变类型：
#     变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，
#     la本身没有动，只是其内部的一部分值被修改了。
#
# python 函数的参数传递：
#     不可变类型：整数、字符串、元组。（类似值传递）
#         如fun（a），传递的只是a的值，没有影响a对象本身。
#         比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。
#
#     可变类型：列表，字典。（引用传递）
#         如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响
#
# python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。

def fn1(a, b):
    a = 10
    b[0] = 10
    print('a =', a, 'id=', id(a))
    print('b =', b, 'id=', id(b))


a1 = 1
b1 = [1, 2, 3]

fn1(a1, b1)  # a1 值传递    b1 引用传递

print('a1 =', a1, 'id=', id(a1))
print('b1 =', b1, 'id=', id(b1))

print('---------------------------------------------------')
a1 = 1
b1 = [1, 2, 3]

fn1(a1, b1[:])  # a1 值传递    b1 通过创建副本实现 值传递

print('a1 =', a1, 'id=', id(a1))
print('b1 =', b1, 'id=', id(b1))
